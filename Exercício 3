1. Coloque aqui o código da sua classe SistemaAmigoMap.

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SistemaAmigoMap {
	
	private List<Mensagem> mensagens;
	private Map<String, Amigo> amigos;
	private int maxMensagens;
	
	public SistemaAmigoMap() {
		this.mensagens = new ArrayList<>();
		this.amigos = new HashMap<>();
	}
	
	public SistemaAmigoMap(int maxMensagens) {
		this.mensagens = new ArrayList<>();
		this.amigos = new HashMap<>();
		this.setMaxMensagens(maxMensagens);
		
	}
	
	public void cadastraAmigo(String nomeAmigo, String emailAmigo) throws AmigoJaExisteException{
		
		Amigo novoAmigo = new Amigo(nomeAmigo, emailAmigo);
		if(!this.amigos.containsKey(emailAmigo)) {
			this.amigos.put(emailAmigo, novoAmigo);
		}else {
			throw new AmigoJaExisteException("Já existe essa pessoa no sistema");
		}
	}
	
	public Amigo pesquisaAmigo(String emailAmigo) throws AmigoInexistenteException{
		Amigo amigoPesquisado = this.amigos.get(emailAmigo);	
		if(amigoPesquisado == null) {
			throw new AmigoInexistenteException("Não existe pessoa cadastrada com esse email: '"+emailAmigo+"'!");
			}else {
				return amigoPesquisado;
			}		
	}
	
	public void enviarMensagemParaTodos(String texto, String emailRemetente, boolean ehAnonimo) {
		Mensagem mensagensEnviadas = new MensagemParaTodos(texto, emailRemetente, ehAnonimo);
		this.mensagens.add(mensagensEnviadas);
	}
	
	public void enviarMensagemParaAlguem(String texto, String emailRemetente, String emailDestinatario, boolean ehAnonimo) {
		Mensagem mensagensEnviadasAlguem = new MensagemParaAlguem(texto, emailRemetente, emailDestinatario, ehAnonimo);
		this.mensagens.add(mensagensEnviadasAlguem);
	}
	
	public List<Mensagem> pesquisaMensagensAnonimas(){
		ArrayList<Mensagem> mensagensAnonimas = new ArrayList<Mensagem>();
		for(Mensagem m: this.mensagens) {
			if(m.ehAnonima()) {
				mensagensAnonimas.add(m);
			}
		}
		return mensagensAnonimas;
	}
	
	
	
	public void configuraAmigoSecretoDe(String emailDaPessoa, String emailAmigoSorteado) throws AmigoInexistenteException{
		Amigo emailDoAmigo = this.amigos.get(emailDaPessoa);
		if(emailDoAmigo == null) {
			throw new AmigoInexistenteException("Não existe pessoa cadastrada com esse email: '"+emailDaPessoa+"'!");
			}else {
				emailDoAmigo.setEmailAmigoSorteado(emailAmigoSorteado);
			}
		}
	
	public List<Mensagem> pesquisaTodasAsMensagens(){
		ArrayList<Mensagem> mensagensEnviadas = new ArrayList<Mensagem>();
		for(Mensagem m: this.mensagens) {
			mensagensEnviadas.add(m);
		}
		return mensagensEnviadas;
	}
	
	public List<Amigo> pesquisaTodosOsAmigos(){
		ArrayList<Amigo> numAmigos = new ArrayList<Amigo>();
		for(String key: amigos.keySet()) {
			Amigo amigoPesquisado = this.amigos.get(key);
			numAmigos.add(amigoPesquisado);
		}
		return numAmigos;
	}
	
	public String pesquisaAmigoSecretoDe(String emailDaPessoa) throws AmigoInexistenteException, AmigoNaoSorteadoException{
		Amigo amigoPesquisado = this.amigos.get(emailDaPessoa);
			if(amigoPesquisado==null) {
				throw new AmigoInexistenteException("Não existe pessoa cadastrada com esse email: '"+emailDaPessoa+"'!");
			}else if(amigoPesquisado.getEmailAmigoSorteado()==null){
				throw new AmigoNaoSorteadoException("A pessoa cadastrada com esse email não possue 'Amigo Secreto'");
			}else {
				return amigoPesquisado.getEmailAmigoSorteado();
			}
		}
	

	public int getMaxMensagens() {
		return maxMensagens;
	}

	public void setMaxMensagens(int maxMensagens) {
		this.maxMensagens = maxMensagens;
	}
	
}


2. Coloque aqui o código da sua classe SistemaAmigoMapTest.

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class SistemaAmigoMapTest {
	
SistemaAmigoMap sistema;
	
	@BeforeEach
	void setUp()  {
		this.sistema = new SistemaAmigoMap();
	}

	@Test
	void testSistemaAmigo() {
		assertTrue(sistema.pesquisaTodasAsMensagens().isEmpty());
		assertThrows(AmigoInexistenteException.class, 
				()-> sistema.pesquisaAmigo("ayla@teste.com"));
	}

	@Test
	void testPesquisaECadastraAmigo() {
		try {
			sistema.pesquisaAmigo("ayla@teste.com");
			fail("Deveria falhar pois não existe ainda");
		} catch (AmigoInexistenteException e) {
			//Ok
		}
		try {
			sistema.cadastraAmigo("ayla", "ayla@teste.com");
			Amigo a = sistema.pesquisaAmigo("ayla@teste.com");
			assertEquals("ayla", a.getNome());
			assertEquals("ayla@teste.com", a.getEmail());
		} catch (AmigoJaExisteException | AmigoInexistenteException  e) {
			fail("Não deveria lançar exceção");
		} 
		
		
	}

	@Test
	void testEnviarMensagemParaTodos() {
		assertTrue(sistema.pesquisaTodasAsMensagens().isEmpty());
		sistema.enviarMensagemParaTodos("texto", "ayla@dcx.ufpb.br", true);
		List<Mensagem> mensagensAchadas = sistema.pesquisaTodasAsMensagens();
		assertTrue(mensagensAchadas.size()==1);
		assertTrue(mensagensAchadas.get(0).getEmailRemetente().equals("ayla@dcx.ufpb.br"));
	}

	@Test
	void testEnviarMensagemParaAlguem() {
		assertTrue(sistema.pesquisaTodasAsMensagens().isEmpty());
		sistema.enviarMensagemParaAlguem("texto", "ayla@dcx.ufpb.br", "rodrigo@dcx.ufpb.br", true);
		List<Mensagem> mensagensAchadas = sistema.pesquisaTodasAsMensagens();
		assertEquals(1, mensagensAchadas.size());
		assertTrue(mensagensAchadas.get(0) instanceof MensagemParaAlguem);
		assertTrue(mensagensAchadas.get(0).getTexto().equals("texto"));
	}

	@Test
	void testPesquisaMensagensAnonimas() {
		assertTrue(sistema.pesquisaTodasAsMensagens().isEmpty());
		sistema.enviarMensagemParaAlguem("texto 1", "ayla@dcx.ufpb.br", "rodrigo@dcx.ufpb.br", false);
		assertTrue(sistema.pesquisaMensagensAnonimas().isEmpty());
		sistema.enviarMensagemParaAlguem("texto 2", "ayla@dcx.ufpb.br", "rodrigo@dcx.ufpb.br", true);
		assertTrue(sistema.pesquisaMensagensAnonimas().size()==1);
	}

	@Test
	void testPesquisaTodasAsMensagens() {
		assertTrue(sistema.pesquisaTodasAsMensagens().isEmpty());
		sistema.enviarMensagemParaAlguem("texto 1", "ayla@dcx.ufpb.br", "rodrigor@dcx.ufpb.br", false);
		assertTrue(sistema.pesquisaTodasAsMensagens().size()==1);
		sistema.enviarMensagemParaAlguem("texto 2", "ayla@dcx.ufpb.br", "rodrigor@dcx.ufpb.br", true);
		assertTrue(sistema.pesquisaTodasAsMensagens().size()==2);
	}

	@Test
	void testPesquisaAmigoEConfiguraAmigoSecretoDe() {
		assertThrows(AmigoInexistenteException.class, 
				()-> sistema.pesquisaAmigoSecretoDe("ayla@dcx.ufpb.br"));
		try {
			sistema.cadastraAmigo("Ayla", "ayla@dcx.ufpb.br");
			sistema.cadastraAmigo("Ana", "ana@dcx.ufpb.br");
			sistema.configuraAmigoSecretoDe("ayla@dcx.ufpb.br", "ana@dcx.ufpb.br");
			sistema.configuraAmigoSecretoDe("ana@dcx.ufpb.br", "ayla@dcx.ufpb.br");
			assertEquals("ana@dcx.ufpb.br", sistema.pesquisaAmigoSecretoDe("ayla@dcx.ufpb.br"));
			assertEquals("ayla@dcx.ufpb.br", sistema.pesquisaAmigoSecretoDe("ana@dcx.ufpb.br"));
		} catch (AmigoInexistenteException | AmigoJaExisteException | AmigoNaoSorteadoException e) {
			fail("Não deveria lançar exceção");
		}
	}
	
}
